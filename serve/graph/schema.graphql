"""
Represents a blockchain block with various attributes detailing its creation and content.
"""
type Block {

  """
  A unique identifier for the Block determined by its position in the blockchain.
  This integer is strictly increasing with each new Block.
  """
  height: Int! 

  """
  The software version of the node that created this Block, indicating the specific 
  implementation and versioning of the blockchain protocol used.
  """
  version: String!

  """
  An identifier for the specific blockchain network this Block belongs to. Helps in 
  distinguishing between different networks like mainnet, testnet, etc.
  """
  chain_id: String!

  """
  The timestamp at which this Block was proposed and finalized in the blockchain. Represented in UTC.
  """
  time: Time!

  """
  Encoded data representing the blockchain address of the proposer who submitted this Block. 
  It is raw and requires decoding to be human-readable.
  """
  proposer_address_raw: String!
}

"""
Defines a transaction within a block, detailing its execution specifics and content.
"""
type Transaction {

  """
  A sequential index representing the order of this Transaction within its Block. Unique within the context of its Block.
  """
  index: Int!

  """
  Hash from Transaction content in base64 encoding.
  """
  hash: String!

  """
  The height of the Block in which this Transaction is included. Links the Transaction to its containing Block.
  """
  block_height: Int!

  """
  The declared amount of computational effort the sender is willing to pay for executing this Transaction.
  """
  gas_wanted: Int!

  """
  The actual amount of computational effort consumed to execute this Transaction. It could be less or equal to `gas_wanted`.
  """
  gas_used: Int!

  """
  The payload of the Transaction in a raw format, typically containing the instructions and any data necessary for execution.
  """
  content_raw: String!
}

"""
Filters for querying Blocks within specified criteria related to their attributes.
"""
input BlockFilter {

  """
  Minimum block height from which to start fetching Blocks, inclusive. If unspecified, there is no lower bound.
  """
  from_height: Int

  """
  Maximum block height up to which Blocks should be fetched, exclusive. If unspecified, there is no upper bound.
  """
  to_height: Int

  """
  Minimum timestamp from which to start fetching Blocks, inclusive. Blocks created at or after this time will be included.
  """
  from_time: Time

  """
  Maximum timestamp up to which to fetch Blocks, exclusive. Only Blocks created before this time are included.
  """
  to_time: Time
}

"""
Filters for querying Transactions within specified criteria related to their execution and placement within Blocks.
"""
input TransactionFilter {

  """
  Minimum block height from which to start fetching Transactions, inclusive. Aids in scoping the search to recent Transactions.
  """
  from_block_height: Int

  """
  Maximum block height up to which Transactions should be fetched, exclusive. Helps in limiting the search to older Transactions.
  """
  to_block_height: Int

  """
  Minimum Transaction index from which to start fetching, inclusive. Facilitates ordering in Transaction queries.
  """
  from_index: Int

  """
  Maximum Transaction index up to which to fetch, exclusive. Ensures a limit on the ordering range for Transaction queries.
  """
  to_index: Int

  """
  Minimum `gas_wanted` value to filter Transactions by, inclusive. Filters Transactions based on the minimum computational effort declared.
  """
  from_gas_wanted: Int

  """
  Maximum `gas_wanted` value for filtering Transactions, exclusive. Limits Transactions based on the declared computational effort.
  """
  to_gas_wanted: Int

  """
  Minimum `gas_used` value to filter Transactions by, inclusive. Selects Transactions based on the minimum computational effort actually used.
  """
  from_gas_used: Int

  """
  Maximum `gas_used` value for filtering Transactions, exclusive. Refines selection based on the computational effort actually consumed.
  """
  to_gas_used: Int

  """
  Hash from Transaction content in base64 encoding. If this filter is used, any other filter will be ignored.
  """
  hash: String

}

"""
Root Query type to fetch data about Blocks and Transactions based on filters or retrieve the latest block height.
"""
type Query {

  """
  Retrieves a list of Transactions that match the given filter criteria. If the result is incomplete due to errors, both partial results and errors are returned.
  """
  transactions(filter: TransactionFilter!): [Transaction!]

  """
  Fetches Blocks matching the specified filter criteria. Incomplete results due to errors return both the partial Blocks and the associated errors.
  """
  blocks(filter: BlockFilter!): [Block!]

  """
  Returns the height of the most recently processed Block by the blockchain indexer, indicating the current length of the blockchain.
  """
  latestBlockHeight: Int!
}

"""
Subscriptions provide a way for clients to receive real-time updates about Transactions and Blocks based on specified filter criteria. 
Subscribers will only receive updates for events occurring after the subscription is established.
"""
type Subscription {

  """
  Subscribes to real-time updates of Transactions that match the provided filter criteria. 
  This subscription starts immediately and only includes Transactions added to the blockchain after the subscription is active.

  This is useful for applications needing to track Transactions in real-time, such as wallets tracking incoming transactions 
  or analytics platforms monitoring blockchain activity.
  
  Returns:
  - Transaction: Each received update is a Transaction object that matches the filter criteria.
  """
  transactions: Transaction!
  
  """
  Subscribes to real-time updates of Blocks that match the provided filter criteria. Similar to the Transactions subscription, 
  this subscription is active immediately upon creation and only includes Blocks added after the subscription begins.

  This subscription is ideal for services that need to be notified of new Blocks for processing or analysis, such as block explorers, 
  data aggregators, or security monitoring tools.

  Returns:
  - Block: Each update consists of a Block object that satisfies the filter criteria, allowing subscribers to process or analyze new Blocks in real time.
  """
  blocks: Block!
}

"""
Field representing a point on time. It is following the RFC3339Nano format ("2006-01-02T15:04:05.999999999Z07:00")
"""
scalar Time
