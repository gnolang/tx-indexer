"""
Defines a transaction within a block, detailing its execution specifics and content.
"""
type Transaction {
  """
  A sequential index representing the order of this Transaction within its Block. Unique within the context of its Block.
  """
  index: Int! @filterable(extras:[MINMAX])

  """
  Hash from Transaction content in base64 encoding.
  """
  hash: String! @filterable

  """
  The success can determine whether the transaction succeeded or failed.
  """
  success: Boolean! @filterable

  """
  The height of the Block in which this Transaction is included. Links the Transaction to its containing Block.
  """
  block_height: Int! @filterable(extras:[MINMAX])
  
  """
  The declared amount of computational effort the sender is willing to pay for executing this Transaction.
  """
  gas_wanted: Int! @filterable

  """
  The actual amount of computational effort consumed to execute this Transaction. It could be less or equal to `gas_wanted`.
  """
  gas_used: Int! @filterable

  """
  Fee includes the amount of coins paid in fees and the maximum
  gas to be used by the transaction.
  """
  gas_fee: Coin @filterable

  """
  The payload of the Transaction in a raw format, typically containing the instructions and any data necessary for execution.
  """
  content_raw: String!

  """
  The payload of a message shows the contents of the messages in a transaction.
  A message consists of `router`, `type`, and `value` (whose form depends on the `router` and `type`).
  """
  messages: [TransactionMessage]! @filterable

  """
  `memo` are string information stored within a transaction.
  `memo` can be utilized to find or distinguish transactions.
  For example, when trading a specific exchange, you would utilize the memo field of the transaction.
  """
  memo: String! @filterable

  """
  `response` is the processing result of the transaction.
  It has `log`, `info`, `error`, and `data`.
  """
  response: TransactionResponse! @filterable
}

"""
`MessageRoute` is route type of the transactional message.
`MessageRoute` has the values of vm and bank.
"""
enum MessageRoute {
  vm
  bank
}

"""
`MessageType` is message type of the transaction.
`MessageType` has the values `send`, `exec`, `add_package`, and `run`.
"""
enum MessageType {
  """
  The route value for this message type is `bank`, and the value for transactional messages is `BankMsgSend`.
  This is a transaction message used when sending native tokens.
  """
  send

  """
  The route value for this message type is `vm`, and the value for transactional messages is `MsgCall`.
  This is a transaction message that executes a function in realm or package that is deployed in the GNO chain.
  """
  exec

  """
  The route value for this message type is `vm`, and the value for transactional messages is `MsgAddPackage`.
  This is a transactional message that adds a package to the GNO chain.
  """
  add_package

  """
  The route value for this message type is `vm`, and the value for transactional messages is `MsgRun`.
  This is a transactional message that executes an arbitrary Gno-coded TX message.
  """
  run
}

type TransactionMessage {
  """
  The type of transaction message.
  The value of `typeUrl` can be `send`, `exec`, `add_package`, `run`.
  """
  typeUrl: String! @filterable

  """
  The route of transaction message.
  The value of `route` can be `bank`, `vm`.
  """
  route: String! @filterable

  """
  MessageValue is the content of the transaction.
  `value` can be of type `BankMsgSend`, `MsgCall`, `MsgAddPackage`, `MsgRun`, `UnexpectedMessage`.
  """
  value: MessageValue! @filterable
}

union MessageValue = BankMsgSend | MsgCall | MsgAddPackage | MsgRun | UnexpectedMessage

"""
`BankMsgSend` is a message with a message router of `bank` and a message type of `send`.
`BankMsgSend` is the fund transfer tx message.
"""
type BankMsgSend {
  """
  the bech32 address of the fund sender.
  ex) `g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5`
  """
  from_address: String! @filterable

  """
  the bech32 address of the fund receiver.
  ex) `g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5`
  """
  to_address: String! @filterable

  """
  the denomination and amount of fund sent ("<amount><denomination>").
  ex) `1000000ugnot`
  """
  amount: String! @filterable
}

"""
`MsgCall` is a message with a message router of `vm` and a message type of `exec`.
`MsgCall` is the method invocation tx message.
"""
type MsgCall {
  """
  the bech32 address of the function caller.
  ex) `g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5`
  """
  caller: String! @filterable

  """
  the amount of funds to be deposited to the package, if any ("<amount><denomination>").
  ex) `1000000ugnot`
  """
  send: String! @filterable

  """
  the gno package path.
  """
  pkg_path: String! @filterable

  """
  the function name being invoked.
  """
  func: String! @filterable

  """
  `args` are the arguments passed to the executed function.
  """
  args: [String!] @filterable
}

"""
`MsgAddPackage` is a message with a message router of `vm` and a message type of `add_package`.
`MsgAddPackage` is the package deployment tx message.
"""
type MsgAddPackage {
  """
  the bech32 address of the package deployer.
  ex) `g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5`
  """
  creator: String! @filterable

  """
  the package being deployed.
  """
  package: MemPackage! @filterable

  """
  the amount of funds to be deposited at deployment, if any ("<amount><denomination>").
  ex) `1000000ugnot`
  """
  deposit: String! @filterable
}

"""
`MsgRun` is a message with a message router of `vm` and a message type of `run`.
`MsgRun is the execute arbitrary Gno code tx message`.
"""
type MsgRun {
  """
  the bech32 address of the function caller.
  ex) `g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5`
  """
  caller: String! @filterable

  """
  the amount of funds to be deposited to the package, if any ("<amount><denomination>").
  ex) `1000000ugnot`
  """
  send: String! @filterable

  """
  the package being executed.
  """
  package: MemPackage! @filterable
}

"""
`UnexpectedMessage` is an Undefined Message, which is a message that decoding failed.
"""
type UnexpectedMessage {
  raw: String!
}

"""
`MemPackage` is the metadata information tied to package / realm deployment.
"""
type MemPackage {
  """
  the name of the package.
  """
  name: String! @filterable

  """
  the gno path of the package.
  """
  path: String! @filterable

  """
  the associated package gno source.
  """
  files: [MemFile!] @filterable
}

"""
`MemFile` is the metadata information tied to a single gno package / realm file
"""
type MemFile {
  """
  the name of the source file.
  """
  name: String! @filterable

  """
  the content of the source file.
  """
  body: String! @filterable
}

"""
The `TxFee` has information about the fee used in the transaction and the maximum gas fee specified by the user.
"""
type TxFee {
  """
  gas limit
  """
  gas_wanted: Int! @filterable

  """
  The gas fee in the transaction.
  """
  gas_fee: Coin! @filterable
}

"""
Define the quantity and denomination of a coin.
"""
type Coin {
  """
  The amount of coins.
  """
  amount: Int! @filterable

  """
  The denomination of the coin.
  """
  denom: String! @filterable
}

"""
`TransactionResponse` is the processing result of the transaction.
It has `log`, `info`, `error`, and `data`.
"""
type TransactionResponse {
  """
  The log value associated with the Transaction execution, if any.
  """
  log: String! @filterable

  """
  The Info associated with the Transaction execution, if any.
  """
  info: String! @filterable

  """
  The error value associated with the Transaction execution, if any.
  """
  error: String! @filterable

  """
  The response data associated with the Transaction execution, if any.
  """
  data: String! @filterable

  """
  The emitted events associated with the transaction execution, if any.
  """
  events: [Event] @filterable
}

union Event = GnoEvent | UnknownEvent

"""
`GnoEvent` is the event information exported by the Gno VM.
It has `type`, `pkg_path`, `func`, and `attrs`.
"""
type GnoEvent {
  """
  `type` is the type of transaction event emitted.
  """
  type: String! @filterable

  """
  `pkg_path` is the path to the package that emitted the event.
  """
  pkg_path: String! @filterable

  """
  `func` is the name of the function that emitted the event.
  """
  func: String! @filterable

  """
  `attrs` is the event's attribute information.
  """
  attrs: [GnoEventAttribute!] @filterable
}

"""
`GnoEventAttribute` is the attributes that the event has.
It has `key` and `value`.
"""
type GnoEventAttribute {
  """
  The key of the event attribute.
  """
  key: String! @filterable

  """
  The value of the event attribute.
  """
  value: String! @filterable
}

"""
`UnknownEvent` is an unknown event type.
It has `value`.
"""
type UnknownEvent {
  """
  `value` is a raw event string.
  """
  value: String! @filterable
}
