package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/gnolang/tx-indexer/serve/graph/model"
	"github.com/gnolang/tx-indexer/types"
)

// Transactions is the resolver for the transactions field.
func (r *subscriptionResolver) Transactions(ctx context.Context, filter model.TransactionFilter) (<-chan *model.Transaction, error) {
	return handleChannel(ctx, r.manager, func(nb *types.NewBlock, c chan<- *model.Transaction) {
		for _, tx := range nb.Results {
			transaction := model.NewTransaction(tx)
			if FilteredTransactionBy(transaction, filter) {
				c <- transaction
			}
		}
	}), nil
}

// Blocks is the resolver for the blocks field.
func (r *subscriptionResolver) Blocks(ctx context.Context, filter model.BlockFilter) (<-chan *model.Block, error) {
	return handleChannel(ctx, r.manager, func(nb *types.NewBlock, c chan<- *model.Block) {
		block := model.NewBlock(nb.Block)
		if FilteredBlockBy(block, filter) {
			c <- block
		}
	}), nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
