package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/gnolang/tx-indexer/serve/graph/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context, filter model.TransactionFilter, after *model.Cursor, size *int, ascending bool) (*model.TransactionList, error) {
	if filter.Hash != nil {
		tx, err := r.store.GetTxByHash(*filter.Hash)
		if err != nil {
			return nil, gqlerror.Wrap(err)
		}

		transactionListEdges := make([]*model.TransactionListEdge, 0)
		transactionListEdges = append(transactionListEdges, model.NewTransactionListEdge(model.NewTransaction(tx)))

		return model.NewTransactionList(transactionListEdges, false), nil
	}

	fromBlockHeight := uint64(deref(filter.FromBlockHeight))
	toBlockHeight := uint64(deref(filter.ToBlockHeight))
	fromIndex := uint32(deref(filter.FromIndex))
	toIndex := uint32(deref(filter.ToIndex))

	afterBlockHeight, afterIndex, err := after.BlockHeightWithIndex()
	if err != nil {
		return nil, err
	}

	// Adjusts the iterator range based on the value of after cursor.
	if afterBlockHeight > 0 {
		if ascending {
			if fromBlockHeight <= afterBlockHeight {
				fromBlockHeight = afterBlockHeight + 1
				fromIndex = uint32(afterIndex)
			}
		} else {
			if toBlockHeight == 0 || toBlockHeight >= afterBlockHeight {
				toBlockHeight = afterBlockHeight - 1
				toIndex = uint32(afterIndex)
			}
		}
	}

	it, err := r.
		store.
		TxIterator(
			fromBlockHeight,
			toBlockHeight,
			fromIndex,
			toIndex,
			ascending,
		)
	if err != nil {
		return nil, gqlerror.Wrap(err)
	}
	defer it.Close()

	transactions := make([]*model.TransactionListEdge, 0)
	hasNext := true
	i := 0

	for {
		if i == maxElementsPerQuery {
			graphql.AddErrorf(ctx, "max elements per query reached (%d)", maxElementsPerQuery)
			break
		}

		if size != nil && deref(size) == i {
			break
		}

		if !it.Next() {
			hasNext = false
			err = it.Error()
			break
		}

		select {
		case <-ctx.Done():
			graphql.AddError(ctx, ctx.Err())
			return model.NewTransactionList(transactions, hasNext), nil
		default:
			t, err := it.Value()
			if err != nil {
				graphql.AddError(ctx, err)
				return model.NewTransactionList(transactions, hasNext), err
			}

			transaction := model.NewTransaction(t)
			if !FilteredTransactionBy(transaction, filter) {
				continue
			}

			transactions = append(transactions, model.NewTransactionListEdge(transaction))
			i++
		}
	}

	return model.NewTransactionList(transactions, hasNext), err
}

// Blocks is the resolver for the blocks field.
func (r *queryResolver) Blocks(ctx context.Context, filter model.BlockFilter, after *model.Cursor, size *int, ascending bool) (*model.BlockList, error) {
	fromBlockHeight := uint64(deref(filter.FromHeight))
	toBlockHeight := uint64(deref(filter.ToHeight))

	afterBlockHeight, err := after.BlockHeight()
	if err != nil {
		return nil, err
	}

	// Adjusts the iterator range based on the value of after cursor.
	if afterBlockHeight > 0 {
		if ascending {
			if fromBlockHeight <= afterBlockHeight {
				fromBlockHeight = afterBlockHeight + 1
			}
		} else {
			if toBlockHeight == 0 || toBlockHeight >= afterBlockHeight {
				toBlockHeight = afterBlockHeight - 1
			}
		}
	}

	it, err := r.
		store.
		BlockIterator(
			fromBlockHeight,
			toBlockHeight,
			ascending,
		)
	if err != nil {
		return nil, gqlerror.Wrap(err)
	}
	defer it.Close()

	blocks := make([]*model.BlockListEdge, 0)
	hasNext := true
	i := 0

	for {
		if i == maxElementsPerQuery {
			graphql.AddErrorf(ctx, "max elements per query reached (%d)", maxElementsPerQuery)
			break
		}

		if size != nil && deref(size) == i {
			break
		}

		if !it.Next() {
			hasNext = false
			err = it.Error()
			break
		}

		select {
		case <-ctx.Done():
			graphql.AddError(ctx, ctx.Err())
			return model.NewBlockList(blocks, hasNext), nil
		default:
			b, err := it.Value()
			if err != nil {
				graphql.AddError(ctx, err)
				return model.NewBlockList(blocks, hasNext), err
			}

			block := model.NewBlock(b)
			if !FilteredBlockBy(block, filter) {
				continue
			}

			blocks = append(blocks, model.NewBlockListEdge(block))
			i++
		}
	}

	return model.NewBlockList(blocks, hasNext), err
}

// LatestBlockHeight is the resolver for the latestBlockHeight field.
func (r *queryResolver) LatestBlockHeight(ctx context.Context) (int, error) {
	h, err := r.store.GetLatestHeight()
	return int(h), err
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
